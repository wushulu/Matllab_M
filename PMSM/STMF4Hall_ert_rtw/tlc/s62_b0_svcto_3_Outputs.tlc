%implements s62_b0_svcto_3_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%<SLibGenerateExtModeOutput(system)>
/* SignalConversion generated from: '<S66>/inValidHall' incorporates:
 *  Constant: '<S66>/Constant'
 */
*rty_inValidHall/*@>4915cb*/ = /*@>497b52*/localP->/*@>497c3b*/Constant_Value;
/* SignalConversion: '<S66>/Signal Conversion' */
*rty_direction/*@>4915cd*/ = /*@>497835*/rtu_previous_direction;
/* SignalConversion generated from: '<S66>/directional_speed_valid_flag' incorporates:
 *  Constant: '<S66>/Constant1'
 */
*rty_directional_speed_valid_fla/*@>4915cf*/ = /*@>497b59*/localP->/*@>497c3e*/Constant1_Value;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[3].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(3, 0, 0)>
%endif
%if SLibCG_ArgAccessed(3, 0, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, FcnSysModuleIsRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface)) ||...
(GenerateClassInterface && SLibIsMultiInstanceServer(rtmArgSys))
%<SLibCG_UndoAccessArg(3, 0, 0)>
%endif
%<LibSetSystemField(system, "CachedOutput2LocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Badhallglitchorwrongconnect(\
%assign comma = ""
%if SLibCG_ArgAccessed(3, 0, 0)
%<comma>%<::tSimStructType> * const %<::tSimStruct>\
%assign comma = ", "
%<SLibUpdateSymbolForFunction("Badhallglitchorwrongconnect", SLibGetFcnDefinitionRTMSymbolName(), TLC_FALSE)>\
%endif
%<comma>int16_T rtu_previous_direction\
%assign comma = ", "
%<comma>uint16_T *rty_inValidHall\
%assign comma = ", "
%<comma>int16_T *rty_direction\
%assign comma = ", "
%<comma>boolean_T *rty_directional_speed_valid_fla\
%assign comma = ", "
%<comma>P_Badhallglitchorwrongconnect_T *localP\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(3, 0, fcnProtoType)>
%endfunction
